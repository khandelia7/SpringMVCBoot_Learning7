#tomcat by default works on 8080 port
#server.port = 8082;

# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "RestProject" as database name and 
# "root" as username and password (blank; dont keep space)
# DB credential
spring.datasource.url = jdbc:mysql://localhost:3306/telusko
spring.datasource.username=root
spring.datasource.password=

# The SQL dialect makes Hibernate generate better SQL for the chosen database
# This is specific to DB for us its mysql
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# here we say to spring, pls make DB tables for me if i create classes
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto= update

# Sometime, spring throws an exception if u ask for some record from
# DB and it cannot find it. so we are saying dont throw exception
spring.jackson.serialization.fail-on-empty-beans=false

#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

security.oauth2.client.clientId= <Client_ID>
security.oauth2.client.clientSecret= <Client_SECRET>
 security.oauth2.client.accessTokenUri= https://www.googleapis.com/oauth2/v3/token
 security.oauth2.client.userAuthorizationUri= https://account.google.com/o/oauth2/auth
 security.oauth2.client.tokenName= oauth_token
 security.oauth2.client.authenticationScheme=query
 security.oauth2.client.clientAuthenticationScheme= form
 security.oauth2.client.scope=profile email

 security.oauth2.resource.userInfoUri =https://www.googleapis.com/userinfo/v2/me
 security.oauth2.resource.preferTokenInfo= false 